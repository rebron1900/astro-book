---
// OGCard.astro
// 用法 1：<OGCard href="https://neodb.social/movie/xxx" />
// 用法 2：<OGCard text="xxx https://neodb.social/movie/yyy zzz" />
import { parse } from 'node-html-parser';

export interface Props {
    href?: string;
    text?: string;
}

const { href, text } = Astro.props;

/* 1. 白名单正则（与原来一致） */
const ALLOWED_REGEX =
    /https?:\/\/(?:www\.)?(?:neodb\.social\/(?:tv\/season|movie|book)\/[\w\-]+|github\.com\/[^\/\s]+\/[^\/\s]+|bilibili\.com\/video\/[\w\-]+(?:\/?))/gi;

/* 提取 + 清洗 + 去重 */
let links: string[] = [];
if (href) {
    links = [href.trim()];
} else if (text) {
    links = [
        ...new Set(
            (text.match(ALLOWED_REGEX) ?? []).map(
                (u) => u.replace(/[.,;:!?'"`<>\]]+$/, '') // 去掉行尾常见标点/括号/尖括号
            )
        )
    ];
}

if (!links.length) return null;

/* 3. 通用解析器（复用原逻辑，抽成函数） */
async function fetchOG(url: string) {
    try {
        const html = await fetch(url, {
            headers: { 'User-Agent': 'Astro-OGCard/1.0' }
        }).then((r) => r.text());
        const root = parse(html);

        const getMeta = (prop: string) => {
            const og = root.querySelector(`meta[property="og:${prop}"]`);
            if (og) return og.getAttribute('content') ?? '';

            if (prop === 'description') {
                const fallback = root.querySelector('meta[name="description"]');
                return fallback?.getAttribute('content') ?? '';
            }
            return '';
        };

        const title = getMeta('title') || getMeta('site_name') || new URL(url).hostname;
        const description = getMeta('description');
        let image = getMeta('image');
        if (url.includes('bilibili.com')) {
            image = 'https://images.weserv.nl/?url=' + image.replace('@100w_100h', '@500w_500h');
        }
        const siteName = getMeta('site_name') || new URL(url).hostname;

        return { title, description, image, siteName, url };
    } catch {
        return null;
    }
}

/* 4. 并发抓取所有链接的元数据 */
const cards = (await Promise.all(links.map(fetchOG))).filter(Boolean);
if (!cards.length) return null;
---

<!-- 5. 渲染卡片列表 -->{
    cards.map((og) => (
        <a href={og.url} target="_blank" rel="noopener noreferrer" class="og-card">
            {og.image && (
                <div class="og-image">
                    <img src={og.image} alt={og.title} loading="lazy" />
                </div>
            )}
            <div class="og-body">
                <p class="og-title">{og.title}</p>
                {og.description && <p class="og-desc">{og.description}</p>}
                <p class="og-site">{og.siteName}</p>
            </div>
        </a>
    ))
}

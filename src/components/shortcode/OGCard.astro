---
// OGCard.astro
// 用法 1：<OGCard href="https://neodb.social/movie/xxx" />
// 用法 2：<OGCard text="xxx RE：https://social.1900.live/@1900 yyy" />
import { parse } from 'node-html-parser';
import { getCachedOG, setCachedOG } from '../../utils/og-cache.js';

export interface Props {
    href?: string;
    text?: string;
}

const { href, text } = Astro.props;

/* 1. 手写白名单规则（代替正则） */
function isAllowed(raw: string): boolean {
    try {
        const u = new URL(raw);

        /* 1. neodb：允许中间任意段，只要出现 /movie/xxx 等即可 */
        if (u.hostname.includes('neodb.social')) {
            // 允许任意前缀，只要出现 /(tv|movie|book)/<id>
            // id 段允许除 / ? # 以外的所有字符
            return /\/(?:tv|movie|book)\/[^/?#]+(?:[/?#]|$)/.test(u.pathname + u.search + u.hash);
        }
        /* 2. github */
        if (u.hostname.includes('github.com')) {
            const [, owner, repo] = u.pathname.split('/');
            return !!(owner && repo && !owner.includes('/') && !repo.includes('/'));
        }

        /* 3. bilibili */
        if (u.hostname.includes('bilibili.com') && u.pathname.startsWith('/video/')) {
            const bvid = u.pathname.split('/')[2];
            return !!(bvid && /^[\w-]+$/.test(bvid));
        }

        /* 4. Mastodon / ActivityPub：允许任意子域名，允许纯数字 id */
        const mastodonMatch = u.pathname.match(/^\/@[^/]+\/(\d+|[\w-]+)$/);
        if (mastodonMatch) return true;

        return false;
    } catch {
        return false;
    }
}

/* 2. 提取 + 清洗 + 去重 + 去掉固定前缀 RE： */
let links: string[] = [];

if (href) {
    links = [href.trim()];
} else if (text) {
    // 先用简单正则把“看起来像 URL”的候选抓出来
    const candidates = text.match(/https?:\/\/[^\s<>\]]+/gi) ?? [];

    links = [
        ...new Set(
            candidates
                .filter(isAllowed) // 用 predicate 过滤
                .map((u) => u.replace(/^RE：/i, ''))
                .map((u) => u.replace(/[.,;:!?'"`<>\]]+$/, ''))
        )
    ];
}
if (!links.length) return null;

/* 3. 通用解析器（带缓存） */
async function fetchOG(url: string) {
    // 先检查缓存
    const cached = getCachedOG(url);
    if (cached) {
        return cached;
    }

    try {
        const html = await fetch(url, {
            headers: { 'User-Agent': 'Astro-OGCard/1.0' }
        }).then((r) => r.text());
        const root = parse(html);

        const getMeta = (prop: string) => root.querySelector(`meta[property="${prop}"]`)?.getAttribute('content') ?? '';

        const title = getMeta('og:title') || getMeta('og:site_name') || new URL(url).hostname;
        const description = getMeta('og:description') || getMeta('description');

        let image = '';

        /* 2. 如果 Gravatar 404 或没有 profile:username，再回退 */
        if (!image) {
            image = getMeta('og:image') || root.querySelector('.account__avatar')?.getAttribute('src') || '';
        }

        /* 3. 针对 bilibili 的特殊处理保持不变 */
        if (url.includes('bilibili.com')) {
            image = 'https://images.weserv.nl/?url=' + image.replace('@100w_100h', '@500w_500h');
        }

        let siteName = getMeta('og:site_name') || new URL(url).hostname;
        if (/\/@[^\/]+\/(?:statuses?|s)?\/[\w\-]+/.test(url)) {
            siteName = `${new URL(url).hostname} (Fediverse)`;
        }

        const ogData = { title, description, image, siteName, url };

        // 保存到缓存
        setCachedOG(url, ogData);

        return ogData;
    } catch {
        return null;
    }
}

/* 4. 并发抓取所有链接的元数据 */
const cards = (await Promise.all(links.map(fetchOG))).filter(Boolean);
if (!cards.length) return null;
---

<!-- 5. 渲染卡片列表 -->{
    cards.map((og) => (
        <a href={og.url} target="_blank" rel="noopener noreferrer" class="og-card">
            {og.image && (
                <div class="og-image">
                    <img src={og.image} alt={og.title} loading="lazy" />
                </div>
            )}
            <div class="og-body">
                <p class="og-title">{og.title}</p>
                {og.description && <p class="og-desc">{og.description}</p>}
                <p class="og-site">{og.siteName}</p>
            </div>
        </a>
    ))
}

---
import { Image } from 'astro:assets';

export interface Props {
    src: string;
    alt?: string;
    class?: string;
}

const { src, alt, class: className, ...attrs } = Astro.props;

const generateImageSrcset = (image: string, isLocal = false) => {
    image = encodeURI(image);
    let imageSrcset = [];
    const imageWidths = [400, 600, 800, 1000, 1200, 1400, 1600, 1800];

    if (image.match(import.meta.env.CND_URL)) {
        // If image is local, determine the width of the image and then generate
        // markup for images at sizes smaller than the image
        imageWidths.forEach((width) => {
            let img = image.endsWith('.gif') == true ? image : `${image}!${width}w ${width}w`;
            imageSrcset.push(img);
        });
    } else if (image.match('unsplash.com')) {
        imageWidths.forEach((width) => {
            const updatedUrl = image.replace(/(w=)[^\&]+/, '$1' + width);
            imageSrcset.push(`${updatedUrl} ${width}w`);
        });
    } else {
        imageSrcset.push(image);
    }

    return imageSrcset.join(', ');
};

// 只处理 cdn.1900.live 的图片
const isCdn = src.startsWith('https://cdn.1900.live/');

let width: number | undefined;
let height: number | undefined;
let useImageComponent = false;

if (isCdn) {
    try {
        const jsonUrl = encodeURI(src) + '!exif';
        const res = await fetch(jsonUrl, { method: 'GET' });
        if (res.ok) {
            const meta = await res.json();
            width = meta.width;
            height = meta.height;
            useImageComponent = true;
        }
    } catch {
        useImageComponent = false
    }
}
---

{
    useImageComponent && width && height ? (
        <Image src={src} alt="" {...attrs} srcset={generateImageSrcset(src)} inferSize />
    ) : (
        <img loading="lazy" class={className ?? ''} src={encodeURI(src)} srcset={generateImageSrcset(src)} alt={alt ?? ''} />
    )
}

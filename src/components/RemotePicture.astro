---
import imageCache from '../utils/image-cache.js';

export interface Props {
    src: string;
    alt?: string;
    class?: string;
}
const encode = (s: string) => encodeURI(s);
type Size = { width: number; height: number };
const TTL = 7 * 24 * 60 * 60 * 1000; // 24h

async function getSize(raw: string): Promise<Size | undefined> {
    const cacheKey = `size_${raw}`;
    const errorCacheKey = `error_${raw}`;

    // 检查缓存 - 如果有错误缓存且未过期，直接返回undefined避免重复请求
    if (await imageCache.has(errorCacheKey)) {
        const errorData = await imageCache.get(errorCacheKey);
        if (errorData && errorData.timestamp && Date.now() - errorData.timestamp < TTL) {
            // 1小时内不再重试失败的请求
            return undefined;
        }
    }

    // 检查正常缓存
    if (await imageCache.has(cacheKey)) {
        return await imageCache.get(cacheKey);
    }

    let result: Size | undefined;

    /* 1) cdn.1900.live */
    if (raw.startsWith('https://cdn.1900.live/')) {
        try {
            const meta = await fetch(`${encode(raw)}!exif`).then((r) => r.json());
            result = { width: meta.width, height: meta.height };
            // 清除错误缓存（如果存在）
            if (await imageCache.has(errorCacheKey)) {
                imageCache.set(errorCacheKey, null);
            }
        } catch (error) {
            result = undefined;
            // 缓存错误信息，避免重复请求
            imageCache.set(errorCacheKey, {
                timestamp: Date.now(),
                error: error.message || 'Unknown error'
            });
        }
    } else if (raw.includes('unsplash.com')) {
        /* 2) unsplash.com */
        const url = new URL(raw);
        const w = Number(url.searchParams.get('w'));
        const h = w * 2;

        if (w) {
            result = { width: w, height: h };
        }
    } else {
        /* 3) 其它域名：拿不到尺寸，返回 undefined */
        result = undefined;
    }

    // 缓存结果
    imageCache.set(cacheKey, result);
    return result;
}

const { src, alt, class: className, ...attrs } = Astro.props;

const generateImageSrcset = (image: string, isLocal = false) => {
    image = encodeURI(image);
    let imageSrcset = [];
    const imageWidths = [400, 600, 800, 1000, 1200, 1400, 1600, 1800];

    if (image.match(import.meta.env.CND_URL)) {
        // If image is local, determine the width of the image and then generate
        // markup for images at sizes smaller than the image
        imageWidths.forEach((width) => {
            let img = image.endsWith('.gif') == true ? image : `${image}!${width}w ${width}w`;
            imageSrcset.push(img);
        });
    } else if (image.match('unsplash.com')) {
        imageWidths.forEach((width) => {
            const updatedUrl = image.replace(/(w=)[^\&]+/, '$1' + width);
            imageSrcset.push(`${updatedUrl} ${width}w`);
        });
    } else {
        imageSrcset.push(image);
    }

    return imageSrcset.join(', ');
};

// 只处理 cdn.1900.live 的图片
const isCdn = src.startsWith('https://cdn.1900.live/') || src.match('unsplash.com') ? true : false;
const size = await getSize(src);
---

{
    isCdn && size ? (
        <img loading="lazy" src={encodeURI(src)} alt="" {...attrs} srcset={generateImageSrcset(src)} width={size.width} height={size.height} />
    ) : (
        <img loading="lazy" class={className ?? ''} src={encodeURI(src)} srcset={generateImageSrcset(src)} alt={alt ?? ''} />
    )
}

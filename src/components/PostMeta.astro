---
// 假设您已经在前面获取了 post 数据并将其传递给这个组件
import type { Tag } from '@ts-ghost/content-api';
import RemotePicture from './RemotePicture.astro';
import { normalizeSlug, normalizeData, getSvg } from '../utils/help';
const { post, isFeature } = Astro.props;
---

<div class="flex align-center text-small book-post-meta">
    <Fragment set:html={getSvg('calendar')} />
    <span>{normalizeData(post.published_at)}</span>
    {
        post.reading_time > 0 &&(
        <Fragment set:html={getSvg('read_time')} />
        <span>{post.reading_time} min</span>
        )
    }

</div>
{
    post.tags && post.tags.filter((tag) => tag.visibility === 'public').length > 0 && (
        <div class="flex align-center text-small book-post-tags">
            <Fragment set:html={getSvg('tags')} />
            {post.tags
                .filter((tag) => tag.visibility === 'public') // 过滤出可见的标签
                .map((tag, index, array) => (
                    <span key={tag.slug}>
                        <a href={`/tag${normalizeSlug(tag.slug)}`}>#{tag.name}</a>
                        {index < array.length - 1 && ', '} {/* 只有在不是最后一个元素时才添加逗号 */}
                    </span>
                ))}
        </div>
    )
}
{
    post.feature_image && isFeature && (
        <figure class="kg-card kg-image-card kg-width-wide kg-card-hascaption">
            <RemotePicture src={post.feature_image} alt={post.feature_image_caption} />
            <figcaption>
                <Fragment set:html={post.feature_image_caption} />
                <Fragment set:html={post.feature_image_alt} />
            </figcaption>
        </figure>
    )
}

name: Astro-CI

on:
    workflow_dispatch:
    repository_dispatch:
        types:
            - update
    schedule:
        - cron: '0 */3 * * *'
    push:
        branches:
            - main

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '18'
                  cache: 'yarn'

            # 1️⃣ 恢复缓存文件 (已修正)
            - name: Restore image/og cache
              uses: actions/cache@v4
              with:
                  path: |
                      src/data/image-meta.json
                      src/data/og-cache.json
                  # key 使用分支名+SHA，确保每次运行的key都不同，以便在内容更新后能成功保存新缓存
                  key: astro-cache-${{ github.ref_name }}-${{ github.sha }}
                  # restore-keys 使用分支名作为前缀，用于恢复该分支下最新的可用缓存
                  restore-keys: |
                      astro-cache-${{ github.ref_name }}-

            # 2️⃣ 恢复 node_modules 缓存
            - name: Cache node modules
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.yarn/cache
                      ~/.npm
                      node_modules
                      **/node_modules
                  key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock', '**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-

            # 3️⃣ 安装依赖
            - name: Install dependencies
              run: |
                  yarn add sharp --ignore-engines
                  yarn install

            # 4️⃣ 写入配置文件
            - name: Write config file
              env:
                  CONFIG_FILE: ${{ secrets.CONFIG_FILE }}
              run: |
                  echo "$CONFIG_FILE" > ./.env

            # 5️⃣ 构建项目
            - name: Build Astro project
              run: yarn build

            # 6️⃣ 部署到 VPS
            - name: Deploy to VPS
              env:
                  VPS_HOST: ${{ secrets.VPS_HOST }}
                  VPS_PORT: ${{ secrets.VPS_PORT }}
                  VPS_USER: ${{ secrets.VPS_USER }}
                  VPS_SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
              run: |
                  mkdir -p ~/.ssh
                  chmod 700 ~/.ssh
                  echo "$VPS_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa
                  echo "StrictHostKeyChecking no" >> ~/.ssh/config
                  rsync -avz --delete -e "ssh -p $VPS_PORT" dist/ $VPS_USER@$VPS_HOST:/var/11ty-data
